🔐 What Is Password Hashing? (Plain English)
When users create accounts, they enter a password.
You should never store passwords as plain text (like "mypassword123"),
because if someone gets access to your data, they’ll see everything.

Instead, we convert (or hash) the password into a random-looking string, like:

mypassword123 → "1f3870be274f6c49b3e31a0c6728957f"
That string is called a hash.

You store only the hash in your database — not the original password.

Later, when a user logs in:

You hash the password they entered, and
Compare that hash to the one you stored.

If they match: it's the correct password ✅
If not: deny access ❌

🛠️ How Can You Implement Hashing as a Beginner?
Let’s say you’re using Python — you can use the built-in hashlib module.

Step 1: When creating a user (sign up)
Import hashlib

Function hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Example usage
plain_password = "mypassword123"
hashed_password = hash_password(plain_password)
store hashed_password in the user object

Step 2: When logging in
user_input = "mypassword123"
hashed_input = hash_password(user_input)

If hashed_input == user.password_stored:
    Allow login
Else:
    Deny login

✅ Beginner-Friendly Summary
Concept	You Do This
Don’t store plain passwords	✅ Only store hashed passwords
Use hashing on sign-up	✅ Convert password to hash
Use hashing on login	✅ Hash the input and compare
Use a secure algorithm	✅ Use sha256 or better (e.g., bcrypt for more advanced)

If you're not using Python and doing everything in pseudocode or another language,
the logic is the same — we just need a hashing function to convert
the password into a secure format.